runtime: python310  # Choose the Python version that matches your app
service: staging-barcode-recommend  # Name of the service
instance_class: F4_1G  # Specifies the instance type (4 cores, 1 GB memory)

# Use Gunicorn with Uvicorn workers and apply the gunicorn_conf.py settings
entrypoint: gunicorn -c gunicorn_conf.py -k uvicorn.workers.UvicornWorker app:app

env_variables:
  ENV: 'staging'

  # API Key for OpenAI
  STAGING_OPENAI_API_KEY: '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'

  # OpenSearch Credentials
  STAGING_OPENSEARCH_USER: 'admin'
  STAGING_OPENSEARCH_PWD: 'HealthyAsianKitchen1$3'
  STAGING_OPENSEARCH_HOST: 'https://search-foodhak-staging-core-ffnbha54vi5fo2hm6vjcjkffpe.eu-west-2.es.amazonaws.com'

  # API Key for internal use
  STAGING_API_KEY: 'mS6WabEO.1Qj6ONyvNvHXkWdbWLFi9mLMgHFVV4m7'

# Optional VPC connector (if your app needs to access private resources on Google Cloud)
vpc_access_connector:
  name: projects/central-muse-388319/locations/us-central1/connectors/vpc-access-connector

inbound_services:
  - warmup  # Enable warmup requests to reduce cold start time

automatic_scaling:
  target_cpu_utilization: 0.65  # Target CPU utilization for scaling
  min_instances: 7  # Minimum number of instances to keep running at all times (for reducing cold starts)
  max_instances: 20  # Maximum number of instances to handle high traffic

# Health check settings to monitor instance health
health_check:
  enable_health_check: true
  check_interval_sec: 20  # Frequency of health checks
  timeout_sec: 8  # Timeout for each health check request
  healthy_threshold: 3  # Number of successful health checks required to mark the instance as healthy
  unhealthy_threshold: 5  # Number of failed health checks before marking the instance as unhealthy
  restart_threshold: 60  # Restart an instance if it's marked as unhealthy for 60 seconds
